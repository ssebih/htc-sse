!function(){var o={};o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(o){if("object"==typeof window)return window}}(),("undefined"!=typeof window?window:void 0!==o.g?o.g:"undefined"!=typeof self?self:{}).SENTRY_RELEASE={id:"034d216bb1e4a116b548c3db76b1fd0409414f96"},function(o){function t(o,t,n,e){if(void 0===n&&(n=function(){}),void 0===e&&(e={}),!o)throw new Error("Target element to observe should be a valid DOM Node");var r=Object.assign({},{viewport:null,modTop:"0px",modRight:"0px",modBottom:"0px",modLeft:"0px",threshold:[0]},e),i=r.viewport,f=r.modTop,u=r.modLeft,d=r.modBottom,s=r.modRight,a=r.threshold;if(!Array.isArray(a)&&"number"!=typeof a)throw new Error("threshold should be a number or an array of numbers");var c=Array.isArray(a)?a.map((function(o){return Math.floor(o%101)/100})):[Math.floor(a?a%101:0)/100],h=Math.min.apply(Math,c),l={root:i instanceof Node?i:null,rootMargin:f+" "+s+" "+d+" "+u,threshold:c},w=new IntersectionObserver((function(e,r){var i=e.filter((function(t){return t.target===o}))[0],f=function(){return r.unobserve(o)};i&&(i.isInViewport=i.isIntersecting&&i.intersectionRatio>=h,i.isInViewport?t(i,f,o):n(i,f,o))}),l);return w.observe(o),function(){return w.unobserve(o)}}o.observeElementInViewport=t,o.isInViewport=function(o,n){return void 0===n&&(n={}),new Promise((function(e,r){try{t(o,(function(o,t){t(),e(!0)}),(function(o,t){t(),e(!1)}),n)}catch(o){r(o)}}))}}(window)}();
//# sourceMappingURL=observe_element_in_viewport.c0dfb4a45058ccf7c0d2.js.map